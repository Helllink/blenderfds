# SPDX-License-Identifier: GPL-3.0-or-later

import time, logging, bpy

from ...config import MAXLEN
from ...types import FDSList, FDSParam
from ... import utils, bl_info

log = logging.getLogger(__name__)


def append_header(context, fds_list):
    bfv = bl_info["version"]
    blv = bpy.app.version_string
    now = time.strftime("%a, %d %b %Y, %H:%M:%S", time.localtime())
    bl_filepath = utils.io.shorten(
        bpy.data.filepath or "not saved", max_len=MAXLEN - 8, start_part=0
    )
    msgs = (  # Always shown
        f"! Generated by BlenderFDS {bfv[0]}.{bfv[1]}.{bfv[2]} on Blender {blv}",
        f"! Date: {now}",
        f"! File: {bl_filepath}",
        f"\n--- Case from Blender Scene: <{context.scene.name}> | View Layer: <{context.view_layer.name}>\n",
    )
    fds_list.msgs.extend(msgs)


def append_sc_namelists(context, fds_list):
    iterable = (
        bf_namelist.to_fds_list(context)
        for bf_namelist in context.scene.bf_namelists
        if bf_namelist
    )
    fds_list.append(FDSList(iterable=iterable))


def append_free_text(context, fds_list):
    sc = context.scene
    if sc.bf_config_text:
        header = f"\n--- Free text from Blender Text: <{sc.bf_config_text.name}>\n"
        msg = sc.bf_config_text.as_string().strip()
        fds_list.append(FDSList(header=header, msg=msg))


def _get_free_text_ref_mas(context):
    """!
    Get list of Blender Material referenced in Free Text by SURF_ID.
    """
    sc = context.scene

    # Get namelists from Free Text
    fds_list = FDSList()
    if sc.bf_config_text:
        fds_list.from_fds(f90_namelists=sc.bf_config_text.as_string())

    # Prepare list of Materials
    mas = list()
    for fds_namelist in fds_list:
        # Check only namelists supporting SURF_ID
        if fds_namelist.fds_label not in ("OBST", "VENT", "DEVC", "CTRL", "PART"):
            continue
        # Has SURF_ID?
        fds_param = fds_namelist.get_fds_label(fds_label="SURF_ID")
        if fds_param:
            hid = fds_param.get_value()
            ma = bpy.data.materials.get(hid)
            if ma:
                mas.append(ma)
    return mas


def _get_exported_obs(context):
    """!
    Get generator of all exported Objects in context.
    """
    return (
        ob
        for ob in context.scene.objects
        if not ob.hide_render  # exported
        and not ob.get_layer_collection(context).exclude  # visible in the View Layer
        and not ob.bf_is_tmp  # not tmp
    )


def _get_ob_ref_mas(context):
    """!
    Get generator of all Materials referenced by exported Objects in context.
    """
    return (
        ms.material
        for ob in _get_exported_obs(context)
        for ms in ob.material_slots
        if ms.material
    )


def append_mas_namelists(context, fds_list):
    header = "\n--- Boundary conditions from Blender Materials\n"
    # Create list of Materials
    mas = set(_get_ob_ref_mas(context)).union(_get_free_text_ref_mas(context))
    bf_default_surf = context.scene.bf_default_surf
    if bf_default_surf:
        mas.add(bf_default_surf)  # add default SURF
    mas = list(mas)
    mas.sort(key=lambda k: k.name)  # alphabetic sorting by name
    iterable = (ma.to_fds_list(context=context) for ma in mas)
    fds_list.append(FDSList(header=header, iterable=iterable))


def append_cos_namelists(context, fds_list):
    header = "\n--- Geometric namelists from Blender Collections"
    iterable = context.scene.collection.to_fds_list(context, full=True)
    fds_list.append(FDSList(header=header, iterable=iterable))


def append_domain_namelists(context, fds_list):
    sc = context.scene

    # Get exported MESHes and sort them by name
    obs = _get_exported_obs(context)
    mesh_obs = list((ob for ob in obs if ob.bf_namelist_cls == "ON_MESH"))
    mesh_obs.sort(key=lambda k: k.name)

    # Linearize MESH fds_list
    mesh_fds_list = FDSList()
    for ob in mesh_obs:
        mesh_fds_list.extend(ob.to_fds_list(context).get_flat_ns())

    # Short track
    if not sc.bf_config_mpi_processes_export:
        mesh_fds_list.header = f"\n--- Computational domain"
        fds_list.append(mesh_fds_list)
        return

    # Init item_weights: ((w0, item0), (w1, item1), ...)
    item_weigths = list()
    for nl in mesh_fds_list:
        ijk = nl.get_fds_label(fds_label="IJK", remove=False)
        ncell = ijk[0] * ijk[1] * ijk[2]
        item_weigths.append((ncell, nl))  # weigth, item

    # Binpack
    nbin = sc.bf_config_mpi_processes
    bins = utils.binpacking.binpack(nbin=nbin, item_weigths=item_weigths)

    # Prepare output
    ncell_tot = sum(w for w, _ in bins)
    nmesh_tot = len(mesh_fds_list)
    header = f"\n--- Computational domain | MPI Processes: {nbin} | MESH Qty: {nmesh_tot} | Cell Qty: {ncell_tot}"
    domain_fds_list = FDSList(header=header)
    for mpi_process, bin in enumerate(bins):

        # Per MPI Process
        ncell, mesh_fds_namelists = bin
        nmesh_tot = len(mesh_fds_namelists)
        header = f"\n-- MPI Process: <{mpi_process}> | MESH Qty: {nmesh_tot} | Cell Qty: {ncell}"
        bin_fds_list = FDSList(header=header)
        domain_fds_list.append(bin_fds_list)
        for mesh_fds_namelist in mesh_fds_namelists:

            # Per MESH
            mesh_fds_namelist.append(
                FDSParam(
                    fds_label="MPI_PROCESS",
                    value=mpi_process,
                )
            )
            bin_fds_list.append(mesh_fds_namelist)

    # Append to main case fds_list
    fds_list.append(domain_fds_list)
